? cvs.txt
cvs diff: Diffing .
cvs diff: Diffing com
cvs diff: Diffing org/apache
cvs diff: Diffing org/apache/maven
cvs diff: Diffing org/apache/maven/plugin
cvs diff: Diffing org/apache/maven/plugin/deltacoverage
Index: org/apache/maven/plugin/deltacoverage/DeltaCoverageMojo.java
===================================================================
RCS file: /cvs/repositories/maven-deltacoverage-plugin/src/main/java/org/apache/maven/plugin/deltacoverage/DeltaCoverageMojo.java,v
retrieving revision 1.16
retrieving revision 1.17
diff -r1.16 -r1.17
5,6d4
<import java.util.Map;
<import java.util.ArrayList;
51a52,57
>	/**
>	 * The SCM repository to use. Currently supported - CVS (default).
>	 * 
>	 * @parameter default-value="CVS" expression="${delta.scm}"
>	 */
>	private String scm;
64c64,65
<		if (coverageReport == null) {
-----
>		if (coverageReport == null || !coverageReport.exists()) {
>			getLog().error("No coverage report found. Configure 'coverageReport' parameter");
Index: org/apache/maven/plugin/deltacoverage/DeltaCoverageCalculator.java
===================================================================
RCS file: /cvs/repositories/maven-deltacoverage-plugin/src/main/java/org/apache/maven/plugin/deltacoverage/DeltaCoverageCalculator.java,v
retrieving revision 1.10
diff -r1.10 
135,136c135,141
<
<			return change.getName().substring(0, change.getName().lastIndexOf('.'));
------
>		String packageName = change.getName();
>		int index = change.getName().lastIndexOf('.');
>		if( index != -1 )
>		{
>			packageName = change.getName().substring(0, index);
>		}
>		return packageName;
cvs diff: Diffing org/apache/maven/plugin/deltacoverage/util
Index: org/apache/maven/plugin/deltacoverage/util/ProcessExecutor.java
===================================================================
RCS file: /cvs/repositories/maven-deltacoverage-plugin/src/main/java/org/apache/maven/plugin/deltacoverage/util/ProcessExecutor.java,v
diff -r1.2
0a1,52
>package org.apache.maven.plugin.deltacoverage.util;
>
>import java.io.File;
>import java.io.IOException;
>import java.util.Map;
>import java.util.Properties;
>
>public class ProcessExecutor {
>
>	private static final String COMMANDS = "commands.properties";
>	private static ProcessExecutor INSTANCE;
>	private Properties properties = new Properties();
>
>	private ProcessExecutor() {
>		try {
>			properties.load(this.getClass().getClassLoader().getResourceAsStream(COMMANDS));
>		} catch (IOException e) {
>			throw new RuntimeException("Could not initialize Process Executor", e);
>		}
>	}
>
>	public static ProcessExecutor getInstance() {
>		if (INSTANCE == null) {
>			INSTANCE = new ProcessExecutor();
>		}
>		return INSTANCE;
>	}
>
>	public ProcessBuilder buildCommand(String commandName, Map<String, String> replaceArgs, File workingDir) throws IOException{
>		String commandArgLine = properties.getProperty(commandName);
>		if (commandArgLine == null) {
>			commandArgLine = properties.getProperty(commandName + "_" + System.getenv("OS"));
>			if (commandArgLine == null) {
>				throw new RuntimeException("Could not find command : '" + commandName + "', OS : " + System.getProperty("OS"));
>			}
>		}
>		String[] commandArgs = commandArgLine.split(" ");
>
>		if (replaceArgs != null && replaceArgs.size() > 0) {
>			for (int i = 0; i < commandArgs.length; i++) {
>				String commandArg = commandArgs[i];
>				if (replaceArgs.get(commandArg) != null) {
>					commandArgs[i] = replaceArgs.get(commandArg);
>				}
>			}
>		}
>		ProcessBuilder builder = new ProcessBuilder(commandArgs);
>		builder.directory(workingDir);
>		builder.redirectErrorStream(true);
>		return builder;
>	}
>}